{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar CryptoJS = require('crypto-js');\n\nvar Buffer = global.Buffer || require('buffer').Buffer;\n\nvar _require = require(\"./DateUtils\"),\n    dateToString = _require.dateToString;\n\nvar FIVE_MINUTES = 5 * (60 * 1000);\nvar AWS_ACL = \"public-read\";\nvar AWS_SERVICE_NAME = \"s3\";\nvar AWS_REQUEST_POLICY_VERSION = \"aws4_request\";\nvar AWS_ALGORITHM = \"AWS4-HMAC-SHA256\";\nvar DEFAULT_SUCCESS_ACTION_STATUS = \"201\";\n\nvar assert = function assert(object, message) {\n  if (null == object) throw new Error(message);\n};\n\nvar S3Policy = exports.S3Policy = function () {\n  function S3Policy() {\n    _classCallCheck(this, S3Policy);\n  }\n\n  _createClass(S3Policy, null, [{\n    key: 'generate',\n    value: function generate(options) {\n      options || (options = {});\n      assert(options.key, \"Must provide `key` option with the object key\");\n      assert(options.bucket, \"Must provide `bucket` option with your AWS bucket name\");\n      assert(options.contentType, \"Must provide `contentType` option with the object content type\");\n      assert(options.region, \"Must provide `region` option with your AWS region\");\n      assert(options.date, \"Must provide `date` option with the current date\");\n      assert(options.accessKey, \"Must provide `accessKey` option with your AWSAccessKeyId\");\n      assert(options.secretKey, \"Must provide `secretKey` option with your AWSSecretKey\");\n      var date = options.date;\n      var timeDelta = options.timeDelta || 0;\n      var policyExpiresIn = FIVE_MINUTES - timeDelta;\n      var expirationDate = new Date(date.getTime() + policyExpiresIn);\n\n      var policyParams = _extends({}, options, {\n        acl: options.acl || AWS_ACL,\n        algorithm: AWS_ALGORITHM,\n        amzDate: dateToString(date, 'amz-iso8601'),\n        yyyymmddDate: dateToString(date, 'yyyymmdd'),\n        expirationDate: dateToString(expirationDate, 'iso8601'),\n        successActionStatus: String(options.successActionStatus || DEFAULT_SUCCESS_ACTION_STATUS)\n      });\n\n      policyParams.credential = [policyParams.accessKey, policyParams.yyyymmddDate, policyParams.region, AWS_SERVICE_NAME, AWS_REQUEST_POLICY_VERSION].join('/');\n      var policy = formatPolicyForEncoding(policyParams);\n      var base64EncodedPolicy = getEncodedPolicy(policy);\n      var signature = getSignature(base64EncodedPolicy, policyParams);\n      return formatPolicyForRequestBody(base64EncodedPolicy, signature, policyParams);\n    }\n  }]);\n\n  return S3Policy;\n}();\n\nvar formatPolicyForRequestBody = function formatPolicyForRequestBody(base64EncodedPolicy, signature, options) {\n  return {\n    \"key\": options.key,\n    \"acl\": options.acl,\n    \"success_action_status\": options.successActionStatus,\n    \"Content-Type\": options.contentType,\n    \"X-Amz-Credential\": options.credential,\n    \"X-Amz-Algorithm\": options.algorithm,\n    \"X-Amz-Date\": options.amzDate,\n    \"Policy\": base64EncodedPolicy,\n    \"X-Amz-Signature\": signature\n  };\n};\n\nvar formatPolicyForEncoding = function formatPolicyForEncoding(policy) {\n  return {\n    \"expiration\": policy.expirationDate,\n    \"conditions\": [{\n      \"bucket\": policy.bucket\n    }, {\n      \"key\": policy.key\n    }, {\n      \"acl\": policy.acl\n    }, {\n      \"success_action_status\": policy.successActionStatus\n    }, {\n      \"Content-Type\": policy.contentType\n    }, {\n      \"x-amz-credential\": policy.credential\n    }, {\n      \"x-amz-algorithm\": policy.algorithm\n    }, {\n      \"x-amz-date\": policy.amzDate\n    }]\n  };\n};\n\nvar getEncodedPolicy = function getEncodedPolicy(policy) {\n  return Buffer.from(JSON.stringify(policy), \"utf-8\").toString(\"base64\");\n};\n\nvar getSignature = function getSignature(base64EncodedPolicy, options) {\n  return CryptoJS.HmacSHA256(base64EncodedPolicy, getSignatureKey(options)).toString(CryptoJS.enc.Hex);\n};\n\nvar getSignatureKey = function getSignatureKey(options) {\n  var kDate = CryptoJS.HmacSHA256(options.yyyymmddDate, \"AWS4\" + options.secretKey);\n  var kRegion = CryptoJS.HmacSHA256(options.region, kDate);\n  var kService = CryptoJS.HmacSHA256(AWS_SERVICE_NAME, kRegion);\n  var kSigning = CryptoJS.HmacSHA256(AWS_REQUEST_POLICY_VERSION, kService);\n  return kSigning;\n};","map":{"version":3,"sources":["C:/Users/18053/Documents/codeworks/projects/LocalTradeApp/localtrade-app-react-native/node_modules/react-native-aws3/lib/S3Policy.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","CryptoJS","require","Buffer","global","_require","dateToString","FIVE_MINUTES","AWS_ACL","AWS_SERVICE_NAME","AWS_REQUEST_POLICY_VERSION","AWS_ALGORITHM","DEFAULT_SUCCESS_ACTION_STATUS","assert","object","message","Error","S3Policy","generate","options","bucket","contentType","region","date","accessKey","secretKey","timeDelta","policyExpiresIn","expirationDate","Date","getTime","policyParams","acl","algorithm","amzDate","yyyymmddDate","successActionStatus","String","credential","join","policy","formatPolicyForEncoding","base64EncodedPolicy","getEncodedPolicy","signature","getSignature","formatPolicyForRequestBody","from","JSON","stringify","toString","HmacSHA256","getSignatureKey","enc","Hex","kDate","kRegion","kService","kSigning"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * S3Policy\n */\n\nvar CryptoJS = require('crypto-js');\nvar Buffer = global.Buffer || require('buffer').Buffer;\n\nvar _require = require('./DateUtils'),\n    dateToString = _require.dateToString;\n\nvar FIVE_MINUTES = 5 * (60 * 1000);\n\nvar AWS_ACL = \"public-read\";\nvar AWS_SERVICE_NAME = \"s3\";\nvar AWS_REQUEST_POLICY_VERSION = \"aws4_request\";\nvar AWS_ALGORITHM = \"AWS4-HMAC-SHA256\";\n\nvar DEFAULT_SUCCESS_ACTION_STATUS = \"201\";\n\nvar assert = function assert(object, message) {\n  if (null == object) throw new Error(message);\n};\n\nvar S3Policy = exports.S3Policy = function () {\n  function S3Policy() {\n    _classCallCheck(this, S3Policy);\n  }\n\n  _createClass(S3Policy, null, [{\n    key: 'generate',\n    value: function generate(options) {\n      options || (options = {});\n\n      assert(options.key, \"Must provide `key` option with the object key\");\n      assert(options.bucket, \"Must provide `bucket` option with your AWS bucket name\");\n      assert(options.contentType, \"Must provide `contentType` option with the object content type\");\n      assert(options.region, \"Must provide `region` option with your AWS region\");\n      assert(options.date, \"Must provide `date` option with the current date\");\n      assert(options.accessKey, \"Must provide `accessKey` option with your AWSAccessKeyId\");\n      assert(options.secretKey, \"Must provide `secretKey` option with your AWSSecretKey\");\n\n      var date = options.date;\n      var timeDelta = options.timeDelta || 0;\n      var policyExpiresIn = FIVE_MINUTES - timeDelta;\n      var expirationDate = new Date(date.getTime() + policyExpiresIn);\n\n      var policyParams = _extends({}, options, {\n        acl: options.acl || AWS_ACL,\n        algorithm: AWS_ALGORITHM,\n        amzDate: dateToString(date, 'amz-iso8601'),\n        yyyymmddDate: dateToString(date, 'yyyymmdd'),\n        expirationDate: dateToString(expirationDate, 'iso8601'),\n        successActionStatus: String(options.successActionStatus || DEFAULT_SUCCESS_ACTION_STATUS)\n      });\n\n      policyParams.credential = [policyParams.accessKey, policyParams.yyyymmddDate, policyParams.region, AWS_SERVICE_NAME, AWS_REQUEST_POLICY_VERSION].join('/');\n\n      var policy = formatPolicyForEncoding(policyParams);\n      var base64EncodedPolicy = getEncodedPolicy(policy);\n      var signature = getSignature(base64EncodedPolicy, policyParams);\n\n      return formatPolicyForRequestBody(base64EncodedPolicy, signature, policyParams);\n    }\n  }]);\n\n  return S3Policy;\n}();\n\nvar formatPolicyForRequestBody = function formatPolicyForRequestBody(base64EncodedPolicy, signature, options) {\n  return {\n    \"key\": options.key,\n    \"acl\": options.acl,\n    \"success_action_status\": options.successActionStatus,\n    \"Content-Type\": options.contentType,\n    \"X-Amz-Credential\": options.credential,\n    \"X-Amz-Algorithm\": options.algorithm,\n    \"X-Amz-Date\": options.amzDate,\n    \"Policy\": base64EncodedPolicy,\n    \"X-Amz-Signature\": signature\n  };\n};\n\nvar formatPolicyForEncoding = function formatPolicyForEncoding(policy) {\n  return {\n    \"expiration\": policy.expirationDate,\n    \"conditions\": [{ \"bucket\": policy.bucket }, { \"key\": policy.key }, { \"acl\": policy.acl }, { \"success_action_status\": policy.successActionStatus }, { \"Content-Type\": policy.contentType }, { \"x-amz-credential\": policy.credential }, { \"x-amz-algorithm\": policy.algorithm }, { \"x-amz-date\": policy.amzDate }]\n  };\n};\n\nvar getEncodedPolicy = function getEncodedPolicy(policy) {\n  return Buffer.from(JSON.stringify(policy), \"utf-8\").toString(\"base64\");\n};\n\nvar getSignature = function getSignature(base64EncodedPolicy, options) {\n  return CryptoJS.HmacSHA256(base64EncodedPolicy, getSignatureKey(options)).toString(CryptoJS.enc.Hex);\n};\n\nvar getSignatureKey = function getSignatureKey(options) {\n  var kDate = CryptoJS.HmacSHA256(options.yyyymmddDate, \"AWS4\" + options.secretKey);\n  var kRegion = CryptoJS.HmacSHA256(options.region, kDate);\n  var kService = CryptoJS.HmacSHA256(AWS_SERVICE_NAME, kRegion);\n  var kSigning = CryptoJS.HmacSHA256(AWS_REQUEST_POLICY_VERSION, kService);\n\n  return kSigning;\n};"]},"metadata":{},"sourceType":"script"}