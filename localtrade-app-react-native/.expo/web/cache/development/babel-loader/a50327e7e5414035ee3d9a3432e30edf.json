{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\18053\\\\Documents\\\\codeworks\\\\projects\\\\LocalTradeApp\\\\localtrade-app-react-native\\\\Components\\\\Post.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Input, Button } from 'react-native-elements';\nimport APIservice from \"./services/APIService\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { UserContext } from \"../Context/Context\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Location from 'expo-location';\n\nvar Post = function Post(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      allPosts = _useContext.allPosts,\n      setAllPosts = _useContext.setAllPosts,\n      idOfUser = _useContext.idOfUser;\n\n  var initialState = {\n    description: '',\n    image_url: '',\n    user_id: idOfUser,\n    longitude: 0.0,\n    latitude: 0.0\n  };\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      post = _useState2[0],\n      setPost = _useState2[1];\n\n  useEffect(function () {\n    getLocation();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var permissionGranted;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionGranted = _context.sent;\n            if (!permissionGranted) alert('we need to permission!');\n            console.log(permissionGranted);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, status, location, _location$coords, latitude, longitude;\n\n    return _regeneratorRuntime.async(function getLocation$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 3:\n            _await$Location$reque = _context2.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context2.next = 8;\n              break;\n            }\n\n            setErrorMessage('Access to location is needed to run the app');\n            return _context2.abrupt(\"return\");\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 10:\n            location = _context2.sent;\n            _location$coords = location.coords, latitude = _location$coords.latitude, longitude = _location$coords.longitude;\n            setPost(_objectSpread(_objectSpread({}, post), {}, {\n              longitude: longitude,\n              latitude: latitude\n            }));\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var addPost = function addPost() {\n    var description, image_url, user_id, longitude, latitude, submittedPost, res;\n    return _regeneratorRuntime.async(function addPost$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            description = post.description, image_url = post.image_url, user_id = post.user_id, longitude = post.longitude, latitude = post.latitude;\n            console.log(post);\n            submittedPost = {\n              description: description,\n              image_url: image_url,\n              user_id: user_id,\n              longitude: longitude,\n              latitude: latitude\n            };\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(APIservice.newPost(submittedPost));\n\n          case 5:\n            res = _context3.sent;\n\n            if (res.error) {\n              alert('could not submit');\n              setPost(initialState);\n            } else {\n              setPost(res);\n\n              (function (post) {\n                setAllPosts(allPosts.concat(post));\n              });\n\n              console.log('submitted successfully');\n              console.log(post);\n            }\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    getlocation: getLocation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Return\",\n    onPress: function onPress() {\n      return navigation.navigate('Dashboard');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Describe your product\",\n    value: post.description,\n    onChangeText: function onChangeText(description) {\n      return setPost(_objectSpread(_objectSpread({}, post), {}, {\n        description: description\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    style: styles.buttons,\n    title: \"Upload image\",\n    onPress: pickImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Submit post\",\n    onPress: addPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttons: {\n    marginTop: 200\n  }\n});\nexport default Post;","map":{"version":3,"sources":["C:/Users/18053/Documents/codeworks/projects/LocalTradeApp/localtrade-app-react-native/Components/Post.js"],"names":["React","useEffect","useState","useContext","Input","Button","APIservice","UserContext","ImagePicker","Location","Post","navigation","allPosts","setAllPosts","idOfUser","initialState","description","image_url","user_id","longitude","latitude","post","setPost","getLocation","pickImage","requestMediaLibraryPermissionsAsync","permissionGranted","alert","console","log","requestPermissionsAsync","status","setErrorMessage","getCurrentPositionAsync","location","coords","addPost","submittedPost","newPost","res","error","concat","styles","container","navigate","buttons","StyleSheet","create","flex","alignItems","justifyContent","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { View, TextInput } from 'react-native';\nimport { Input, Button } from 'react-native-elements';\nimport APIservice from './services/APIService';\nimport { StyleSheet } from 'react-native';\nimport { UserContext } from '../Context/Context'\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Location from 'expo-location';\n\n// import {Permissions} from 'expo';\n// import { ImagePickerIOS } from 'react-native';\n\nconst Post = ({ navigation }) => {\n  const { allPosts, setAllPosts, idOfUser } = useContext(UserContext)\n  const initialState = {\n    description: '',\n    image_url: '',\n    user_id: idOfUser,\n    longitude: 0.0,\n    latitude: 0.0\n  }\n  const [post, setPost] = useState(initialState)\n\n  useEffect(() => {\n    getLocation();\n  }, [])\n\n  // const askForPermission = async () => {\n  //   const permissionGranted = await ImagePicker.requestMediaLibraryPermissionsAsync();\n  //   if(!permissionGranted) alert('we need to permission!')\n  // }\n\n  const pickImage = async () => {\n    const permissionGranted = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (!permissionGranted) alert('we need to permission!')\n    // let res = await imagePicker.launchImageLibraryAsync({\n    //   mediaTypes: ImagePicker.MediaTypeOptions.All,\n    //   allowsEditing: true,\n    //   aspect: [4,3],\n    //   quality: 1,\n    // });\n    // const image_uri =  res.uri;\n    // console.log(image_uri); \n    console.log(permissionGranted)\n  }\n\n  const getLocation = async () => {\n    try {\n      let { status } = await Location.requestPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMessage('Access to location is needed to run the app');\n        return;\n      }\n      const location = await Location.getCurrentPositionAsync({});\n      const { latitude, longitude } = location.coords;\n      // alert(`latitude: ${latitude}, longitude: ${longitude}`)\n      // WHY DOES THIS NOT WORK? it alerts the location but its not being saved to the \n      // setPost({ ...post, longitude: longitude, latitude:latitude})\n      setPost({\n        ...post,\n        longitude: longitude,\n        latitude: latitude\n      });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const addPost = async () => {\n    const { description, image_url, user_id, longitude, latitude } = post;\n\n    console.log(post);\n    const submittedPost = { description, image_url, user_id, longitude, latitude };\n    const res = await APIservice.newPost(submittedPost);\n    if (res.error) {\n      alert('could not submit');\n      setPost(initialState);\n    } else {\n      setPost(res);\n      (post) => { setAllPosts(allPosts.concat(post)) };\n      console.log('submitted successfully')\n      // prints post with correct information... why is it not saving it to the db? \n      console.log(post);\n\n    }\n  }\n\n  return (\n    <View style={styles.container} getlocation={getLocation} >\n      <Button title='Return' onPress={() => navigation.navigate('Dashboard')} />\n      <Input\n        placeholder='Describe your product'\n        value={post.description}\n        onChangeText={(description) => setPost({ ...post, description: description })}\n      />\n      <Button\n        style={styles.buttons}\n        title='Upload image'\n        onPress={pickImage}\n      />\n      {/* TODO add a post AND redirect to dashboard */}\n      {/* TODO a loading while posting  */}\n      <Button title='Submit post' \n        onPress={addPost} \n        />\n    </View>\n  )\n\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttons: {\n    marginTop: 200\n  },\n})\n\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}