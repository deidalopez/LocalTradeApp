{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\18053\\\\Documents\\\\codeworks\\\\projects\\\\LocalTradeApp\\\\localtrade-app-react-native\\\\Components\\\\Feed.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Card, Button } from 'react-native-elements';\nimport APIservice from \"./services/APIService\";\nimport { getDistance } from 'geolib';\nimport * as Location from 'expo-location';\nimport { UserContext } from \"../Context/Context\";\n\nvar Feed = function Feed(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      allPosts = _useContext.allPosts;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var _useState3 = useState({\n    latitude: 0,\n    longitude: 0\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      location = _useState4[0],\n      setLocation = _useState4[1];\n\n  var sortedByDistance = [];\n\n  var _useState5 = useState(allPosts),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortedPosts = _useState6[0],\n      setSortedPosts = _useState6[1];\n\n  useEffect(function () {\n    load();\n    getAllPosts();\n  }, []);\n\n  function load() {\n    var _await$Location$reque, status, userlocation, _userlocation$coords, latitude, longitude;\n\n    return _regeneratorRuntime.async(function load$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 3:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 8;\n              break;\n            }\n\n            setErrorMessage('Access to location is needed to run the app');\n            return _context.abrupt(\"return\");\n\n          case 8:\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n          case 10:\n            userlocation = _context.sent;\n            _userlocation$coords = userlocation.coords, latitude = _userlocation$coords.latitude, longitude = _userlocation$coords.longitude;\n            setLocation({\n              longitude: longitude,\n              latitude: latitude\n            });\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  }\n\n  var getAllPosts = function getAllPosts() {\n    var allPostsArray, postsWithDistance;\n    return _regeneratorRuntime.async(function getAllPosts$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(APIservice.getAllPosts());\n\n          case 2:\n            allPostsArray = _context2.sent;\n\n            if (allPostsArray.error) {\n              alert('error getting all posts');\n            } else {\n              postsWithDistance = allPostsArray.map(function (post) {\n                var userInfo = getUserInfo(post.user_id);\n                var firstName = userInfo.firstName,\n                    email = userInfo.email;\n                var postLocation = {\n                  longitude: Number(post.longitude),\n                  latitude: Number(post.latitude)\n                };\n                return {\n                  description: post.description,\n                  image_url: post.image_url,\n                  distance: (getDistance(location, postLocation, 10) / 16100).toFixed(1),\n                  location: postLocation,\n                  user_id: post.user_id,\n                  post_id: post.id,\n                  firstName: firstName,\n                  email: email\n                };\n              });\n              sortedByDistance = postsWithDistance.sort(function (a, b) {\n                return a.distance - b.distance;\n              });\n              setSortedPosts(sortedByDistance);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getUserInfo = function getUserInfo(user_id) {\n    var res, firstName, id, email;\n    return _regeneratorRuntime.async(function getUserInfo$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(APIservice.getUserById(user_id));\n\n          case 2:\n            res = _context3.sent;\n\n            if (!res.error) {\n              _context3.next = 7;\n              break;\n            }\n\n            alert('problem getting user info');\n            _context3.next = 10;\n            break;\n\n          case 7:\n            console.log(res);\n            firstName = res.firstName, id = res.id, email = res.email;\n            return _context3.abrupt(\"return\", {\n              firstName: firstName,\n              email: email\n            });\n\n          case 10:\n            ;\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var interested = function interested(user_id) {\n    var res, firstName, id, email;\n    return _regeneratorRuntime.async(function interested$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(APIservice.getUserById(user_id));\n\n          case 2:\n            res = _context4.sent;\n\n            if (!res.error) {\n              _context4.next = 7;\n              break;\n            }\n\n            alert('problem getting user info');\n            _context4.next = 12;\n            break;\n\n          case 7:\n            console.log(res);\n            firstName = res.firstName, id = res.id, email = res.email;\n            console.log(firstName);\n            console.log(email);\n            return _context4.abrupt(\"return\", {\n              firstName: firstName,\n              email: email\n            });\n\n          case 12:\n            ;\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderFeed = function renderFeed() {\n    return sortedPosts.map(function (post) {\n      return React.createElement(Card, {\n        key: post.post_id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        style: {\n          width: 250,\n          height: 250,\n          margin: 30\n        },\n        source: {\n          uri: \"https://localtrade.s3-us-west-1.amazonaws.com/\" + post.image_url\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }), React.createElement(Card.Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, post.description), React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, \"Posted \", post.distance, \" miles away\"), React.createElement(Button, {\n        title: \"interested\",\n        type: \"outline\",\n        buttonStyle: {\n          marginVertical: 10\n        },\n        onPress: function onPress() {\n          return navigation.push('Profile', {\n            user_id: post.user_id\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: [styles.title],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"Offers near me: \"), React.createElement(ScrollView, {\n    style: {\n      marginHorizontal: 20,\n      backgroundColor: '#DAE8EF'\n    },\n    bounces: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, renderFeed()));\n};\n\nexport default Feed;\nvar styles = StyleSheet.create({\n  screenContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    padding: 16\n  },\n  title: {\n    fontSize: 25,\n    paddingVertical: 15,\n    paddingLeft: 20\n  },\n  buttonsContainer: {\n    paddingVertical: 10,\n    marginHorizontal: 15,\n    paddingHorizontal: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/18053/Documents/codeworks/projects/LocalTradeApp/localtrade-app-react-native/Components/Feed.js"],"names":["React","useEffect","useState","useContext","Card","Button","APIservice","getDistance","Location","UserContext","Feed","navigation","allPosts","errorMessage","setErrorMessage","latitude","longitude","location","setLocation","sortedByDistance","sortedPosts","setSortedPosts","load","getAllPosts","requestPermissionsAsync","status","getCurrentPositionAsync","userlocation","coords","console","log","allPostsArray","error","alert","postsWithDistance","map","post","userInfo","getUserInfo","user_id","firstName","email","postLocation","Number","description","image_url","distance","toFixed","post_id","id","sort","a","b","getUserById","res","interested","renderFeed","width","height","margin","uri","marginVertical","push","styles","title","marginHorizontal","backgroundColor","StyleSheet","create","screenContainer","flex","justifyContent","padding","fontSize","paddingVertical","paddingLeft","buttonsContainer","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\nimport { View, Text, Image, StyleSheet, ScrollView } from 'react-native'\n// import {Location, Permissions} from 'expo'\nimport { Card, Button } from 'react-native-elements';\nimport APIservice from './services/APIService';\nimport { getDistance } from 'geolib';\nimport * as Location from 'expo-location';\nimport { UserContext } from '../Context/Context'\n// import { StyleSheet } from 'react-native';\n\nconst Feed = ({ navigation }) => {\n  const { allPosts } = useContext(UserContext)\n\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [location, setLocation] = useState({\n    latitude: 0,\n    longitude: 0\n  })\n  let sortedByDistance = [];\n\n  const [sortedPosts, setSortedPosts] = useState(allPosts);\n\n  useEffect(() => {\n    load()\n    getAllPosts()\n  }, [])\n\n  async function load() {\n    try {\n      let { status } = await Location.requestPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMessage('Access to location is needed to run the app');\n        return;\n      }\n      const userlocation = await Location.getCurrentPositionAsync();\n      const { latitude, longitude } = userlocation.coords;\n      setLocation({ longitude: longitude, latitude: latitude });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const getAllPosts = async () => {\n    const allPostsArray = await APIservice.getAllPosts();\n    if (allPostsArray.error) {\n      alert('error getting all posts')\n    } else {\n      const postsWithDistance = allPostsArray.map((post) => {\n        const userInfo = getUserInfo(post.user_id);\n        const { firstName, email } = userInfo;\n        const postLocation = { longitude: Number(post.longitude), latitude: Number(post.latitude) };\n        // console.log(postLocation);\n        // console.log('distance between current and post ', getDistance(location, postLocation));\n        return {\n          description: post.description,\n          image_url: post.image_url,\n          distance: ((getDistance(location, postLocation, 10)) / 16100).toFixed(1),\n          location: postLocation,\n          user_id: post.user_id,\n          post_id: post.id,\n          firstName: firstName,\n          email: email\n        }\n      })\n      sortedByDistance = postsWithDistance.sort((a, b) => a.distance - b.distance)\n      // sortedByDistance=[...postsWithDistance];\n      setSortedPosts(sortedByDistance)\n    }\n  }\n\n  const getUserInfo = async (user_id) => {\n    const res = await APIservice.getUserById(user_id);\n    if (res.error) {\n      alert('problem getting user info');\n    } else {\n      console.log(res)\n      const { firstName, id, email } = res;\n      return {\n        firstName: firstName,\n        email: email\n      }\n    };\n  }\n  const interested = async (user_id) => {\n    const res = await APIservice.getUserById(user_id);\n    if (res.error) {\n      alert('problem getting user info');\n    } else {\n      console.log(res)\n      const { firstName, id, email } = res;\n      console.log(firstName)\n      console.log(email)\n      return {\n        firstName: firstName,\n        email: email\n      }\n    };\n  }\n\n\n  const renderFeed = () => {\n    return sortedPosts.map((post) => {\n      return (\n        <Card key={post.post_id}>\n          {/* <Card.Title> {post.image_url}  </Card.Title> */}\n          <Image\n            style={{ width: 250, height: 250, margin: 30 }}\n            source={{\n              uri: `https://localtrade.s3-us-west-1.amazonaws.com/${post.image_url}`\n            }}\n          />\n          <Card.Divider />\n          <Text>{post.description}</Text>\n          <Text>Posted {post.distance} miles away</Text>\n          <Button title='interested'\n            type='outline'\n            buttonStyle={{ marginVertical: 10 }}\n            onPress={() => navigation.push('Profile', { user_id: post.user_id })}\n          />\n          {/* <Button title='interested' type='outline' onPress={() => interested(post.user_id) }/> */}\n        </Card>\n      )\n    })\n  }\n  return (\n    <View>\n      {/* <Text>Feed</Text> */}\n      {/* <Button title='My Location' onPress={() => setLocation()} /> */}\n      {/* <Text>longitude {location.longitude}, latitude {location.latitude}</Text> */}\n      <Text style={[styles.title]}>Offers near me: </Text>\n      {/* <FlatList \n        data = {sortedByDistance}\n        renderItem={renderFeed}\n      /> */}\n      {/* <Button title='get posts' onPress = {()=>getAllPosts()}/> */}\n      <ScrollView style={{ marginHorizontal: 20, backgroundColor: '#DAE8EF' }} bounces={true}>\n        {renderFeed()}\n      </ScrollView>\n    </View>\n\n  )\n\n}\n\nexport default Feed;\n\nconst styles = StyleSheet.create({\n  screenContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    padding: 16\n  },\n  title: {\n    fontSize: 25,\n    paddingVertical: 15,\n    paddingLeft: 20,\n  },\n  buttonsContainer: {\n    paddingVertical: 10,\n    marginHorizontal: 15,\n    // backgroundColor: \"#009688\",\n    paddingHorizontal: 12\n  }\n})\n\n// const getAllPosts = async () => {\n//   const allPostsArray =  await APIservice.getAllPosts();\n//   if (allPostsArray.error) {\n//     alert('error getting all posts')\n//   } else {\n//     const postsWithDistance = allPostsArray.map((post) => {\n//       const postLocation = {longitude:post.longitude, latitude:post.latitude};\n//       return { \n//         description:post.description,\n//         image:post.image_url,\n//         distance: geolib.getDistance(location, postLocation),\n//         location: postLocation,\n//         user_id: post.user_id,\n//         post_id: post.id\n//       }\n//     })\n//     console.log(postsWithDistance);\n//     return postsWithDistance;\n\n//   }\n// }"]},"metadata":{},"sourceType":"module"}