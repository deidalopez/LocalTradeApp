{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\18053\\\\Documents\\\\codeworks\\\\projects\\\\LocalTradeApp\\\\localtrade-app-react-native\\\\Components\\\\Post.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Input, Button } from 'react-native-elements';\nimport APIservice from \"./services/APIService\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { UserContext } from \"../Context/Context\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Location from 'expo-location';\nimport keys from \"./keys\";\nimport { RNS3 } from 'react-native-aws3';\n\nvar Post = function Post(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useContext = useContext(UserContext),\n      allPosts = _useContext.allPosts,\n      setAllPosts = _useContext.setAllPosts,\n      idOfUser = _useContext.idOfUser;\n\n  var initialState = {\n    description: '',\n    image_url: '',\n    user_id: idOfUser,\n    longitude: 0.0,\n    latitude: 0.0\n  };\n\n  var _useState3 = useState(initialState),\n      _useState4 = _slicedToArray(_useState3, 2),\n      post = _useState4[0],\n      setPost = _useState4[1];\n\n  useEffect(function () {\n    getLocation();\n    askForPermission();\n  }, []);\n\n  var askForPermission = function askForPermission() {\n    var _await$ImagePicker$re, status;\n\n    return _regeneratorRuntime.async(function askForPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(Platform.OS !== 'web')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 3:\n            _await$ImagePicker$re = _context.sent;\n            status = _await$ImagePicker$re.status;\n\n            if (status !== 'granted') {\n              alert('Sorry, we need camera roll permissions to make this work!');\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              saveImageToAWS3(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var saveImageToAWS3 = function saveImageToAWS3(image) {\n    var file = {\n      uri: image,\n      name: Math.random().toString(36),\n      type: 'image/png'\n    };\n    var config = {\n      keyPrefix: '',\n      bucket: 'localtrade',\n      region: 'us-west-1',\n      accessKey: keys.AccessKey,\n      secretKey: keys.SecretKey,\n      successActionStatus: 201\n    };\n    RNS3.put(file, config).then(function (res) {\n      if (res.status !== 201) throw new Error('failed to upload image to s3');\n      setPost(_objectSpread(_objectSpread({}, post), {}, {\n        image_url: file.name\n      }));\n      console.log('received by aws3');\n    });\n  };\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, status, location, _location$coords, latitude, longitude;\n\n    return _regeneratorRuntime.async(function getLocation$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 3:\n            _await$Location$reque = _context3.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context3.next = 8;\n              break;\n            }\n\n            setErrorMessage('Access to location is needed to run the app');\n            return _context3.abrupt(\"return\");\n\n          case 8:\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 10:\n            location = _context3.sent;\n            _location$coords = location.coords, latitude = _location$coords.latitude, longitude = _location$coords.longitude;\n            setPost(_objectSpread(_objectSpread({}, post), {}, {\n              longitude: longitude,\n              latitude: latitude\n            }));\n            _context3.next = 18;\n            break;\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var addPost = function addPost() {\n    var description, image_url, user_id, longitude, latitude, submittedPost, res;\n    return _regeneratorRuntime.async(function addPost$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            description = post.description, image_url = post.image_url, user_id = post.user_id, longitude = post.longitude, latitude = post.latitude;\n            console.log('here is the post body');\n            console.log(post);\n            submittedPost = {\n              description: description,\n              image_url: image_url,\n              user_id: user_id,\n              longitude: longitude,\n              latitude: latitude\n            };\n            console.log(submittedPost);\n            _context4.next = 7;\n            return _regeneratorRuntime.awrap(APIservice.newPost(submittedPost));\n\n          case 7:\n            res = _context4.sent;\n\n            if (res.error) {\n              alert('could not submit');\n              setPost(initialState);\n            } else {\n              setPost(res);\n\n              (function (post) {\n                setAllPosts(allPosts.concat(post));\n              });\n\n              console.log('submitted successfully');\n            }\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Back\",\n    onPress: function onPress() {\n      return navigation.navigate('Dashboard');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Describe your product\",\n    value: post.description,\n    onChangeText: function onChangeText(description) {\n      return setPost(_objectSpread(_objectSpread({}, post), {}, {\n        description: description\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  })), React.createElement(Button, {\n    title: \"Submit post\",\n    onPress: addPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttons: {\n    marginTop: 200\n  }\n});\nexport default Post;","map":{"version":3,"sources":["C:/Users/18053/Documents/codeworks/projects/LocalTradeApp/localtrade-app-react-native/Components/Post.js"],"names":["React","useEffect","useState","useContext","Input","Button","APIservice","UserContext","ImagePicker","Location","keys","RNS3","Post","navigation","image","setImage","allPosts","setAllPosts","idOfUser","initialState","description","image_url","user_id","longitude","latitude","post","setPost","getLocation","askForPermission","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uri","saveImageToAWS3","file","name","Math","random","toString","type","config","keyPrefix","bucket","region","accessKey","AccessKey","secretKey","SecretKey","successActionStatus","put","then","res","Error","console","log","requestPermissionsAsync","setErrorMessage","getCurrentPositionAsync","location","coords","addPost","submittedPost","newPost","error","concat","styles","container","navigate","flex","alignItems","justifyContent","width","height","StyleSheet","create","buttons","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { View, Image, Platform } from 'react-native';\nimport { Input, Button } from 'react-native-elements';\nimport APIservice from './services/APIService';\nimport { StyleSheet } from 'react-native';\nimport { UserContext } from '../Context/Context'\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Location from 'expo-location';\nimport keys from './keys';\nimport { RNS3 } from 'react-native-aws3';\n\nconst Post = ({ navigation }) => {\n  const [image, setImage] = useState(null);\n  const { allPosts, setAllPosts, idOfUser } = useContext(UserContext)\n  const initialState = {\n    description: '',\n    image_url: '',\n    user_id: idOfUser,\n    longitude: 0.0,\n    latitude: 0.0\n  }\n\n  const [post, setPost] = useState(initialState)\n\n  useEffect(() => {\n    getLocation();\n    askForPermission();\n  }, [])\n\n  const askForPermission = async () => {\n    if (Platform.OS !== 'web') {\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (status !== 'granted') {\n        alert('Sorry, we need camera roll permissions to make this work!');\n      }\n    }\n  }\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n    if (!result.cancelled) {\n      setImage(result.uri);\n      saveImageToAWS3(result.uri);\n    }\n  };\n\n  const saveImageToAWS3 = (image) => {\n    const file = {\n      uri: image,\n      name: Math.random().toString(36),\n      type: 'image/png'\n    }\n    const config = {\n      keyPrefix: '',\n      bucket: 'localtrade',\n      region: 'us-west-1',\n      accessKey: keys.AccessKey,\n      secretKey: keys.SecretKey,\n      successActionStatus: 201,\n    }\n\n    RNS3.put(file, config).then(res => {\n      if (res.status !== 201) throw new Error('failed to upload image to s3')\n      // console.log(res.body)\n      setPost({ ...post, image_url: file.name })\n      console.log('received by aws3')\n    })\n  }\n\n\n  const getLocation = async () => {\n    try {\n      let { status } = await Location.requestPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMessage('Access to location is needed to run the app');\n        return;\n      }\n      const location = await Location.getCurrentPositionAsync({});\n      const { latitude, longitude } = location.coords;\n      setPost({\n        ...post,\n        longitude: longitude,\n        latitude: latitude\n      });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const addPost = async () => {\n    const { description, image_url, user_id, longitude, latitude } = post;\n    console.log('here is the post body');\n    console.log(post);\n    const submittedPost = { description, image_url, user_id, longitude, latitude };\n    console.log(submittedPost);\n    const res = await APIservice.newPost(submittedPost);\n    if (res.error) {\n      alert('could not submit');\n      setPost(initialState);\n    } else {\n      setPost(res);\n      (post) => { setAllPosts(allPosts.concat(post)) };\n      console.log('submitted successfully')\n    }\n  }\n\n  return (\n    <View style={styles.container}  >\n      <Button title='Back' onPress={() => navigation.navigate('Dashboard')} />\n      <Input\n        placeholder='Describe your product'\n        value={post.description}\n        onChangeText={(description) => setPost({ ...post, description: description })}\n      />\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n        {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n      </View>\n      {/* add a post and redirect to dashboard */}\n      <Button title='Submit post' onPress={addPost} />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttons: {\n    marginTop: 200\n  },\n})\n\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}